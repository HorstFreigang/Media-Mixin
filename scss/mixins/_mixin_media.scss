// default breakpoints map
$breakpoints: (
    'xs': 575px,
    'sm': 768px,
    'md': 992px,
    'lg': 1200px
) !default;

// Parsing passed string to a number
@function parseInt($str, $unit) {
    $number: 0;
    $digits: (
        '0': 0,
        '1': 1,
        '2': 2,
        '3': 3,
        '4': 4,
        '5': 5,
        '6': 6,
        '7': 7,
        '8': 8,
        '9': 9
    );

    @for $i from 1 through str_length($str) {
        $number: $number * 10 + map-get($digits, str_slice($str, $i, $i));
    }

    @if $unit == 'px' {
        $number: $number * 1px;
    } @else if $unit == 'em' {
        $number: $number * 1em;
    }

    @return $number;
}

// Getting the operator of the breakpoint
@function get_operator($arg) {
    // Checking if there is an operator at all
    @if((str_slice($arg, 1, 1) == '<') or (str_slice($arg, 1, 1) == '>') or (str_slice($arg, 1, 1) == '=')) {
        @if str_slice($arg, 2, 2) == '=' {
            @return str_slice($arg, 1, 2);
        } @else {
            @return str_slice($arg, 1, 1);
        }
    } @else if((str_slice($arg, 1, 1) == 'h')) {
        @if((str_slice($arg, 2, 2) == '<') or (str_slice($arg, 2, 2) == '>') or (str_slice($arg, 2, 2) == '=')) {
            @if str_slice($arg, 3, 3) == '=' {
                @return str_slice($arg, 1, 3);
            } @else {
                @return str_slice($arg, 1, 2);
            }
        }
    } @else {
        @return null;
    }
}

// Getting breakpoint
@function get_value($arg) {
    @if ((str_slice($arg, 1, 1) == '<') or (str_slice($arg, 1, 1) == '>') or (str_slice($arg, 1, 1) == '=')) {
        @if str_slice($arg, 2, 2) == '=' {
            @return str_slice($arg, 3);
        } @else {
            @return str_slice($arg, 2);
        }
    } @else if((str_slice($arg, 1, 1) == 'h')) {
        @if ((str_slice($arg, 2, 2) == '<') or (str_slice($arg, 2, 2) == '>') or (str_slice($arg, 2, 2) == '=')) {
            @if str_slice($arg, 3, 3) == '=' {
                @return str_slice($arg, 4);
            } @else {
                @return str_slice($arg, 3);
            }
        }
    } @else {
        @return $arg;
    }
}

// Getting value of breakpoint
@function get_breakpoint($value) {
    $width: 0;
    $substr: 0;
    $unit: '';

    @if map-get($breakpoints, $value) != null {
        $width: map-get($breakpoints, $value);
    } @else {
        @if str_index($value, 'px') != null {
            $substr: str_slice($value, 0, str_index($value, 'px') - 1);
            $unit: px;
        } @else if str_index($value, 'em') != null {
            $substr: str_slice($value, 0, str_index($value, 'em') - 1);
            $unit: em;
        }
        $width: parseInt($substr, $unit);
    }

    @return $width;
}

// Mixin
@mixin media($args...) {
    $query: '';
    $operator: '';
    $value: 0;
    $width: 0;

    @for $i from 1 through length($args) {
        // Splitting args into a list
        $subargs: nth($args, $i);

        // Building media query string
        @if str-length($query) != 0 {
            $query: $query + ', ';
        }

        $query: $query + 'only screen and ';

        @for $j from 1 through length($subargs) {
            $arg: nth($subargs, $j);
            $operator: get_operator($arg);
            $value: get_value($arg);

            @if $j != 1 {
                $query: $query + ' and ';
            }

            @if $operator != null {
                $length: get_breakpoint($value);
                $lengthMinus: 0;
                $lengthPlus: 0;

                @if unit($length) == 'px' {
                    $lengthMinus: $length - 1;
                    $lengthPlus: $length + 1;
                } @else if unit($length) == 'em' {
                    $lengthMinus: $length - .0625;
                    $lengthPlus: $length + .0625;
                }

                @if $operator == '>' {
                    $query: $query + '(min-width: #{$lengthPlus})';
                } @else if $operator == '<' {
                    $query: $query + '(max-width: #{$lengthMinus})';
                } @else if $operator == '>=' {
                    $query: $query + '(min-width: #{$length})';
                } @else if $operator == '<=' {
                    $query: $query + '(max-width: #{$length})';
                } @else if $operator == '=' {
                    $query: $query + '(min-width: #{$length}) and (max-width: #{$length})';
                }

                @if $operator == 'h>' {
                    $query: $query + '(min-height: #{$lengthPlus})';
                } @else if $operator == 'h<' {
                    $query: $query + '(max-height: #{$lengthMinus})';
                } @else if $operator == 'h>=' {
                    $query: $query + '(min-height: #{$length})';
                } @else if $operator == 'h<=' {
                    $query: $query + '(max-height: #{$length})';
                } @else if $operator == 'h=' {
                    $query: $query + '(min-height: #{$length}) and (max-height: #{$length})';
                }
            } @else {
                $query: $query + '(#{$value})';
            }
        }
    }

    @media #{$query} {
        @content;
    }
}
